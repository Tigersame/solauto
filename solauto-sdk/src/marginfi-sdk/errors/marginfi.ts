/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** MathError: Math error */
export class MathErrorError extends ProgramError {
  override readonly name: string = 'MathError';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Math error', program, cause);
  }
}
codeToErrorMap.set(0x1770, MathErrorError);
nameToErrorMap.set('MathError', MathErrorError);

/** BankNotFound: Invalid bank index */
export class BankNotFoundError extends ProgramError {
  override readonly name: string = 'BankNotFound';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid bank index', program, cause);
  }
}
codeToErrorMap.set(0x1771, BankNotFoundError);
nameToErrorMap.set('BankNotFound', BankNotFoundError);

/** LendingAccountBalanceNotFound: Lending account balance not found */
export class LendingAccountBalanceNotFoundError extends ProgramError {
  override readonly name: string = 'LendingAccountBalanceNotFound';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Lending account balance not found', program, cause);
  }
}
codeToErrorMap.set(0x1772, LendingAccountBalanceNotFoundError);
nameToErrorMap.set(
  'LendingAccountBalanceNotFound',
  LendingAccountBalanceNotFoundError
);

/** BankAssetCapacityExceeded: Bank deposit capacity exceeded */
export class BankAssetCapacityExceededError extends ProgramError {
  override readonly name: string = 'BankAssetCapacityExceeded';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Bank deposit capacity exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1773, BankAssetCapacityExceededError);
nameToErrorMap.set('BankAssetCapacityExceeded', BankAssetCapacityExceededError);

/** InvalidTransfer: Invalid transfer */
export class InvalidTransferError extends ProgramError {
  override readonly name: string = 'InvalidTransfer';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid transfer', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidTransferError);
nameToErrorMap.set('InvalidTransfer', InvalidTransferError);

/** MissingPythOrBankAccount: Missing Pyth or Bank account */
export class MissingPythOrBankAccountError extends ProgramError {
  override readonly name: string = 'MissingPythOrBankAccount';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Missing Pyth or Bank account', program, cause);
  }
}
codeToErrorMap.set(0x1775, MissingPythOrBankAccountError);
nameToErrorMap.set('MissingPythOrBankAccount', MissingPythOrBankAccountError);

/** MissingPythAccount: Missing Pyth account */
export class MissingPythAccountError extends ProgramError {
  override readonly name: string = 'MissingPythAccount';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Missing Pyth account', program, cause);
  }
}
codeToErrorMap.set(0x1776, MissingPythAccountError);
nameToErrorMap.set('MissingPythAccount', MissingPythAccountError);

/** InvalidOracleAccount: Invalid Pyth account */
export class InvalidOracleAccountError extends ProgramError {
  override readonly name: string = 'InvalidOracleAccount';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Invalid Pyth account', program, cause);
  }
}
codeToErrorMap.set(0x1777, InvalidOracleAccountError);
nameToErrorMap.set('InvalidOracleAccount', InvalidOracleAccountError);

/** MissingBankAccount: Missing Bank account */
export class MissingBankAccountError extends ProgramError {
  override readonly name: string = 'MissingBankAccount';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Missing Bank account', program, cause);
  }
}
codeToErrorMap.set(0x1778, MissingBankAccountError);
nameToErrorMap.set('MissingBankAccount', MissingBankAccountError);

/** InvalidBankAccount: Invalid Bank account */
export class InvalidBankAccountError extends ProgramError {
  override readonly name: string = 'InvalidBankAccount';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Invalid Bank account', program, cause);
  }
}
codeToErrorMap.set(0x1779, InvalidBankAccountError);
nameToErrorMap.set('InvalidBankAccount', InvalidBankAccountError);

/** BadAccountHealth: Bad account health */
export class BadAccountHealthError extends ProgramError {
  override readonly name: string = 'BadAccountHealth';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Bad account health', program, cause);
  }
}
codeToErrorMap.set(0x177a, BadAccountHealthError);
nameToErrorMap.set('BadAccountHealth', BadAccountHealthError);

/** LendingAccountBalanceSlotsFull: Lending account balance slots are full */
export class LendingAccountBalanceSlotsFullError extends ProgramError {
  override readonly name: string = 'LendingAccountBalanceSlotsFull';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Lending account balance slots are full', program, cause);
  }
}
codeToErrorMap.set(0x177b, LendingAccountBalanceSlotsFullError);
nameToErrorMap.set(
  'LendingAccountBalanceSlotsFull',
  LendingAccountBalanceSlotsFullError
);

/** BankAlreadyExists: Bank already exists */
export class BankAlreadyExistsError extends ProgramError {
  override readonly name: string = 'BankAlreadyExists';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Bank already exists', program, cause);
  }
}
codeToErrorMap.set(0x177c, BankAlreadyExistsError);
nameToErrorMap.set('BankAlreadyExists', BankAlreadyExistsError);

/** IllegalLiquidation: Illegal liquidation */
export class IllegalLiquidationError extends ProgramError {
  override readonly name: string = 'IllegalLiquidation';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Illegal liquidation', program, cause);
  }
}
codeToErrorMap.set(0x177d, IllegalLiquidationError);
nameToErrorMap.set('IllegalLiquidation', IllegalLiquidationError);

/** AccountNotBankrupt: Account is not bankrupt */
export class AccountNotBankruptError extends ProgramError {
  override readonly name: string = 'AccountNotBankrupt';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Account is not bankrupt', program, cause);
  }
}
codeToErrorMap.set(0x177e, AccountNotBankruptError);
nameToErrorMap.set('AccountNotBankrupt', AccountNotBankruptError);

/** BalanceNotBadDebt: Account balance is not bad debt */
export class BalanceNotBadDebtError extends ProgramError {
  override readonly name: string = 'BalanceNotBadDebt';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Account balance is not bad debt', program, cause);
  }
}
codeToErrorMap.set(0x177f, BalanceNotBadDebtError);
nameToErrorMap.set('BalanceNotBadDebt', BalanceNotBadDebtError);

/** InvalidConfig: Invalid group config */
export class InvalidConfigError extends ProgramError {
  override readonly name: string = 'InvalidConfig';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Invalid group config', program, cause);
  }
}
codeToErrorMap.set(0x1780, InvalidConfigError);
nameToErrorMap.set('InvalidConfig', InvalidConfigError);

/** StaleOracle: Stale oracle data */
export class StaleOracleError extends ProgramError {
  override readonly name: string = 'StaleOracle';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Stale oracle data', program, cause);
  }
}
codeToErrorMap.set(0x1781, StaleOracleError);
nameToErrorMap.set('StaleOracle', StaleOracleError);

/** BankPaused: Bank paused */
export class BankPausedError extends ProgramError {
  override readonly name: string = 'BankPaused';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Bank paused', program, cause);
  }
}
codeToErrorMap.set(0x1782, BankPausedError);
nameToErrorMap.set('BankPaused', BankPausedError);

/** BankReduceOnly: Bank is ReduceOnly mode */
export class BankReduceOnlyError extends ProgramError {
  override readonly name: string = 'BankReduceOnly';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Bank is ReduceOnly mode', program, cause);
  }
}
codeToErrorMap.set(0x1783, BankReduceOnlyError);
nameToErrorMap.set('BankReduceOnly', BankReduceOnlyError);

/** BankAccoutNotFound: Bank is missing */
export class BankAccoutNotFoundError extends ProgramError {
  override readonly name: string = 'BankAccoutNotFound';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super('Bank is missing', program, cause);
  }
}
codeToErrorMap.set(0x1784, BankAccoutNotFoundError);
nameToErrorMap.set('BankAccoutNotFound', BankAccoutNotFoundError);

/** OperationDepositOnly: Operation is deposit-only */
export class OperationDepositOnlyError extends ProgramError {
  override readonly name: string = 'OperationDepositOnly';

  readonly code: number = 0x1785; // 6021

  constructor(program: Program, cause?: Error) {
    super('Operation is deposit-only', program, cause);
  }
}
codeToErrorMap.set(0x1785, OperationDepositOnlyError);
nameToErrorMap.set('OperationDepositOnly', OperationDepositOnlyError);

/** OperationWithdrawOnly: Operation is withdraw-only */
export class OperationWithdrawOnlyError extends ProgramError {
  override readonly name: string = 'OperationWithdrawOnly';

  readonly code: number = 0x1786; // 6022

  constructor(program: Program, cause?: Error) {
    super('Operation is withdraw-only', program, cause);
  }
}
codeToErrorMap.set(0x1786, OperationWithdrawOnlyError);
nameToErrorMap.set('OperationWithdrawOnly', OperationWithdrawOnlyError);

/** OperationBorrowOnly: Operation is borrow-only */
export class OperationBorrowOnlyError extends ProgramError {
  override readonly name: string = 'OperationBorrowOnly';

  readonly code: number = 0x1787; // 6023

  constructor(program: Program, cause?: Error) {
    super('Operation is borrow-only', program, cause);
  }
}
codeToErrorMap.set(0x1787, OperationBorrowOnlyError);
nameToErrorMap.set('OperationBorrowOnly', OperationBorrowOnlyError);

/** OperationRepayOnly: Operation is repay-only */
export class OperationRepayOnlyError extends ProgramError {
  override readonly name: string = 'OperationRepayOnly';

  readonly code: number = 0x1788; // 6024

  constructor(program: Program, cause?: Error) {
    super('Operation is repay-only', program, cause);
  }
}
codeToErrorMap.set(0x1788, OperationRepayOnlyError);
nameToErrorMap.set('OperationRepayOnly', OperationRepayOnlyError);

/** NoAssetFound: No asset found */
export class NoAssetFoundError extends ProgramError {
  override readonly name: string = 'NoAssetFound';

  readonly code: number = 0x1789; // 6025

  constructor(program: Program, cause?: Error) {
    super('No asset found', program, cause);
  }
}
codeToErrorMap.set(0x1789, NoAssetFoundError);
nameToErrorMap.set('NoAssetFound', NoAssetFoundError);

/** NoLiabilityFound: No liability found */
export class NoLiabilityFoundError extends ProgramError {
  override readonly name: string = 'NoLiabilityFound';

  readonly code: number = 0x178a; // 6026

  constructor(program: Program, cause?: Error) {
    super('No liability found', program, cause);
  }
}
codeToErrorMap.set(0x178a, NoLiabilityFoundError);
nameToErrorMap.set('NoLiabilityFound', NoLiabilityFoundError);

/** InvalidOracleSetup: Invalid oracle setup */
export class InvalidOracleSetupError extends ProgramError {
  override readonly name: string = 'InvalidOracleSetup';

  readonly code: number = 0x178b; // 6027

  constructor(program: Program, cause?: Error) {
    super('Invalid oracle setup', program, cause);
  }
}
codeToErrorMap.set(0x178b, InvalidOracleSetupError);
nameToErrorMap.set('InvalidOracleSetup', InvalidOracleSetupError);

/** IllegalUtilizationRatio: Invalid bank utilization ratio */
export class IllegalUtilizationRatioError extends ProgramError {
  override readonly name: string = 'IllegalUtilizationRatio';

  readonly code: number = 0x178c; // 6028

  constructor(program: Program, cause?: Error) {
    super('Invalid bank utilization ratio', program, cause);
  }
}
codeToErrorMap.set(0x178c, IllegalUtilizationRatioError);
nameToErrorMap.set('IllegalUtilizationRatio', IllegalUtilizationRatioError);

/** BankLiabilityCapacityExceeded: Bank borrow cap exceeded */
export class BankLiabilityCapacityExceededError extends ProgramError {
  override readonly name: string = 'BankLiabilityCapacityExceeded';

  readonly code: number = 0x178d; // 6029

  constructor(program: Program, cause?: Error) {
    super('Bank borrow cap exceeded', program, cause);
  }
}
codeToErrorMap.set(0x178d, BankLiabilityCapacityExceededError);
nameToErrorMap.set(
  'BankLiabilityCapacityExceeded',
  BankLiabilityCapacityExceededError
);

/** InvalidPrice: Invalid Price */
export class InvalidPriceError extends ProgramError {
  override readonly name: string = 'InvalidPrice';

  readonly code: number = 0x178e; // 6030

  constructor(program: Program, cause?: Error) {
    super('Invalid Price', program, cause);
  }
}
codeToErrorMap.set(0x178e, InvalidPriceError);
nameToErrorMap.set('InvalidPrice', InvalidPriceError);

/** IsolatedAccountIllegalState: Account can have only one liablity when account is under isolated risk */
export class IsolatedAccountIllegalStateError extends ProgramError {
  override readonly name: string = 'IsolatedAccountIllegalState';

  readonly code: number = 0x178f; // 6031

  constructor(program: Program, cause?: Error) {
    super(
      'Account can have only one liablity when account is under isolated risk',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x178f, IsolatedAccountIllegalStateError);
nameToErrorMap.set(
  'IsolatedAccountIllegalState',
  IsolatedAccountIllegalStateError
);

/** EmissionsAlreadySetup: Emissions already setup */
export class EmissionsAlreadySetupError extends ProgramError {
  override readonly name: string = 'EmissionsAlreadySetup';

  readonly code: number = 0x1790; // 6032

  constructor(program: Program, cause?: Error) {
    super('Emissions already setup', program, cause);
  }
}
codeToErrorMap.set(0x1790, EmissionsAlreadySetupError);
nameToErrorMap.set('EmissionsAlreadySetup', EmissionsAlreadySetupError);

/** OracleNotSetup: Oracle is not set */
export class OracleNotSetupError extends ProgramError {
  override readonly name: string = 'OracleNotSetup';

  readonly code: number = 0x1791; // 6033

  constructor(program: Program, cause?: Error) {
    super('Oracle is not set', program, cause);
  }
}
codeToErrorMap.set(0x1791, OracleNotSetupError);
nameToErrorMap.set('OracleNotSetup', OracleNotSetupError);

/** InvalidSwitchboardDecimalConversion: Invalid swithcboard decimal conversion */
export class InvalidSwitchboardDecimalConversionError extends ProgramError {
  override readonly name: string = 'InvalidSwitchboardDecimalConversion';

  readonly code: number = 0x1792; // 6034

  constructor(program: Program, cause?: Error) {
    super('Invalid swithcboard decimal conversion', program, cause);
  }
}
codeToErrorMap.set(0x1792, InvalidSwitchboardDecimalConversionError);
nameToErrorMap.set(
  'InvalidSwitchboardDecimalConversion',
  InvalidSwitchboardDecimalConversionError
);

/** CannotCloseOutstandingEmissions: Cannot close balance because of outstanding emissions */
export class CannotCloseOutstandingEmissionsError extends ProgramError {
  override readonly name: string = 'CannotCloseOutstandingEmissions';

  readonly code: number = 0x1793; // 6035

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot close balance because of outstanding emissions',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1793, CannotCloseOutstandingEmissionsError);
nameToErrorMap.set(
  'CannotCloseOutstandingEmissions',
  CannotCloseOutstandingEmissionsError
);

/** EmissionsUpdateError: Update emissions error */
export class EmissionsUpdateErrorError extends ProgramError {
  override readonly name: string = 'EmissionsUpdateError';

  readonly code: number = 0x1794; // 6036

  constructor(program: Program, cause?: Error) {
    super('Update emissions error', program, cause);
  }
}
codeToErrorMap.set(0x1794, EmissionsUpdateErrorError);
nameToErrorMap.set('EmissionsUpdateError', EmissionsUpdateErrorError);

/** AccountDisabled: Account disabled */
export class AccountDisabledError extends ProgramError {
  override readonly name: string = 'AccountDisabled';

  readonly code: number = 0x1795; // 6037

  constructor(program: Program, cause?: Error) {
    super('Account disabled', program, cause);
  }
}
codeToErrorMap.set(0x1795, AccountDisabledError);
nameToErrorMap.set('AccountDisabled', AccountDisabledError);

/** AccountTempActiveBalanceLimitExceeded: Account can't temporarily open 3 balances, please close a balance first */
export class AccountTempActiveBalanceLimitExceededError extends ProgramError {
  override readonly name: string = 'AccountTempActiveBalanceLimitExceeded';

  readonly code: number = 0x1796; // 6038

  constructor(program: Program, cause?: Error) {
    super(
      "Account can't temporarily open 3 balances, please close a balance first",
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1796, AccountTempActiveBalanceLimitExceededError);
nameToErrorMap.set(
  'AccountTempActiveBalanceLimitExceeded',
  AccountTempActiveBalanceLimitExceededError
);

/** AccountInFlashloan: Illegal action during flashloan */
export class AccountInFlashloanError extends ProgramError {
  override readonly name: string = 'AccountInFlashloan';

  readonly code: number = 0x1797; // 6039

  constructor(program: Program, cause?: Error) {
    super('Illegal action during flashloan', program, cause);
  }
}
codeToErrorMap.set(0x1797, AccountInFlashloanError);
nameToErrorMap.set('AccountInFlashloan', AccountInFlashloanError);

/** IllegalFlashloan: Illegal flashloan */
export class IllegalFlashloanError extends ProgramError {
  override readonly name: string = 'IllegalFlashloan';

  readonly code: number = 0x1798; // 6040

  constructor(program: Program, cause?: Error) {
    super('Illegal flashloan', program, cause);
  }
}
codeToErrorMap.set(0x1798, IllegalFlashloanError);
nameToErrorMap.set('IllegalFlashloan', IllegalFlashloanError);

/** IllegalFlag: Illegal flag */
export class IllegalFlagError extends ProgramError {
  override readonly name: string = 'IllegalFlag';

  readonly code: number = 0x1799; // 6041

  constructor(program: Program, cause?: Error) {
    super('Illegal flag', program, cause);
  }
}
codeToErrorMap.set(0x1799, IllegalFlagError);
nameToErrorMap.set('IllegalFlag', IllegalFlagError);

/** IllegalBalanceState: Illegal balance state */
export class IllegalBalanceStateError extends ProgramError {
  override readonly name: string = 'IllegalBalanceState';

  readonly code: number = 0x179a; // 6042

  constructor(program: Program, cause?: Error) {
    super('Illegal balance state', program, cause);
  }
}
codeToErrorMap.set(0x179a, IllegalBalanceStateError);
nameToErrorMap.set('IllegalBalanceState', IllegalBalanceStateError);

/** IllegalAccountAuthorityTransfer: Illegal account authority transfer */
export class IllegalAccountAuthorityTransferError extends ProgramError {
  override readonly name: string = 'IllegalAccountAuthorityTransfer';

  readonly code: number = 0x179b; // 6043

  constructor(program: Program, cause?: Error) {
    super('Illegal account authority transfer', program, cause);
  }
}
codeToErrorMap.set(0x179b, IllegalAccountAuthorityTransferError);
nameToErrorMap.set(
  'IllegalAccountAuthorityTransfer',
  IllegalAccountAuthorityTransferError
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMarginfiErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMarginfiErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
