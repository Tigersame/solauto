/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ReferralState = Account<ReferralStateAccountData>;

export type ReferralStateAccountData = {
  bump: Array<number>;
  padding1: Array<number>;
  authority: PublicKey;
  referredByState: PublicKey;
  destFeesMint: PublicKey;
  lookupTable: PublicKey;
  padding: Array<number>;
};

export type ReferralStateAccountDataArgs = ReferralStateAccountData;

export function getReferralStateAccountDataSerializer(): Serializer<
  ReferralStateAccountDataArgs,
  ReferralStateAccountData
> {
  return struct<ReferralStateAccountData>(
    [
      ['bump', array(u8(), { size: 1 })],
      ['padding1', array(u8(), { size: 7 })],
      ['authority', publicKeySerializer()],
      ['referredByState', publicKeySerializer()],
      ['destFeesMint', publicKeySerializer()],
      ['lookupTable', publicKeySerializer()],
      ['padding', array(u8(), { size: 96 })],
    ],
    { description: 'ReferralStateAccountData' }
  ) as Serializer<ReferralStateAccountDataArgs, ReferralStateAccountData>;
}

export function deserializeReferralState(
  rawAccount: RpcAccount
): ReferralState {
  return deserializeAccount(
    rawAccount,
    getReferralStateAccountDataSerializer()
  );
}

export async function fetchReferralState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReferralState> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ReferralState');
  return deserializeReferralState(maybeAccount);
}

export async function safeFetchReferralState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReferralState | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeReferralState(maybeAccount) : null;
}

export async function fetchAllReferralState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReferralState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReferralState');
    return deserializeReferralState(maybeAccount);
  });
}

export async function safeFetchAllReferralState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReferralState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReferralState(maybeAccount as RpcAccount)
    );
}

export function getReferralStateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      bump: Array<number>;
      padding1: Array<number>;
      authority: PublicKey;
      referredByState: PublicKey;
      destFeesMint: PublicKey;
      lookupTable: PublicKey;
      padding: Array<number>;
    }>({
      bump: [0, array(u8(), { size: 1 })],
      padding1: [1, array(u8(), { size: 7 })],
      authority: [8, publicKeySerializer()],
      referredByState: [40, publicKeySerializer()],
      destFeesMint: [72, publicKeySerializer()],
      lookupTable: [104, publicKeySerializer()],
      padding: [136, array(u8(), { size: 96 })],
    })
    .deserializeUsing<ReferralState>((account) =>
      deserializeReferralState(account)
    );
}

export function getReferralStateSize(): number {
  return 232;
}
