"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBankAccountDataSerializer = getBankAccountDataSerializer;
exports.deserializeBank = deserializeBank;
exports.fetchBank = fetchBank;
exports.safeFetchBank = safeFetchBank;
exports.fetchAllBank = fetchAllBank;
exports.safeFetchAllBank = safeFetchAllBank;
exports.getBankGpaBuilder = getBankGpaBuilder;
exports.getBankSize = getBankSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getBankAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['mint', (0, serializers_1.publicKey)()],
        ['mintDecimals', (0, serializers_1.u8)()],
        ['group', (0, serializers_1.publicKey)()],
        ['autoPadding0', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 7 })],
        ['assetShareValue', (0, types_1.getWrappedI80F48Serializer)()],
        ['liabilityShareValue', (0, types_1.getWrappedI80F48Serializer)()],
        ['liquidityVault', (0, serializers_1.publicKey)()],
        ['liquidityVaultBump', (0, serializers_1.u8)()],
        ['liquidityVaultAuthorityBump', (0, serializers_1.u8)()],
        ['insuranceVault', (0, serializers_1.publicKey)()],
        ['insuranceVaultBump', (0, serializers_1.u8)()],
        ['insuranceVaultAuthorityBump', (0, serializers_1.u8)()],
        ['autoPadding1', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 4 })],
        ['collectedInsuranceFeesOutstanding', (0, types_1.getWrappedI80F48Serializer)()],
        ['feeVault', (0, serializers_1.publicKey)()],
        ['feeVaultBump', (0, serializers_1.u8)()],
        ['feeVaultAuthorityBump', (0, serializers_1.u8)()],
        ['autoPadding2', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 6 })],
        ['collectedGroupFeesOutstanding', (0, types_1.getWrappedI80F48Serializer)()],
        ['totalLiabilityShares', (0, types_1.getWrappedI80F48Serializer)()],
        ['totalAssetShares', (0, types_1.getWrappedI80F48Serializer)()],
        ['lastUpdate', (0, serializers_1.i64)()],
        ['config', (0, types_1.getBankConfigSerializer)()],
        ['emissionsFlags', (0, serializers_1.u64)()],
        ['emissionsRate', (0, serializers_1.u64)()],
        ['emissionsRemaining', (0, types_1.getWrappedI80F48Serializer)()],
        ['emissionsMint', (0, serializers_1.publicKey)()],
        ['padding0', (0, serializers_1.array)((0, serializers_1.u128)(), { size: 28 })],
        ['padding1', (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
    ], { description: 'BankAccountData' }), (value) => ({
        ...value,
        discriminator: [142, 49, 166, 242, 50, 66, 97, 188],
    }));
}
function deserializeBank(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getBankAccountDataSerializer());
}
async function fetchBank(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'Bank');
    return deserializeBank(maybeAccount);
}
async function safeFetchBank(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeBank(maybeAccount) : null;
}
async function fetchAllBank(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'Bank');
        return deserializeBank(maybeAccount);
    });
}
async function safeFetchAllBank(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeBank(maybeAccount));
}
function getBankGpaBuilder(context) {
    const programId = context.programs.getPublicKey('marginfi', 'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        mint: [8, (0, serializers_1.publicKey)()],
        mintDecimals: [40, (0, serializers_1.u8)()],
        group: [41, (0, serializers_1.publicKey)()],
        autoPadding0: [73, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 7 })],
        assetShareValue: [80, (0, types_1.getWrappedI80F48Serializer)()],
        liabilityShareValue: [96, (0, types_1.getWrappedI80F48Serializer)()],
        liquidityVault: [112, (0, serializers_1.publicKey)()],
        liquidityVaultBump: [144, (0, serializers_1.u8)()],
        liquidityVaultAuthorityBump: [145, (0, serializers_1.u8)()],
        insuranceVault: [146, (0, serializers_1.publicKey)()],
        insuranceVaultBump: [178, (0, serializers_1.u8)()],
        insuranceVaultAuthorityBump: [179, (0, serializers_1.u8)()],
        autoPadding1: [180, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 4 })],
        collectedInsuranceFeesOutstanding: [184, (0, types_1.getWrappedI80F48Serializer)()],
        feeVault: [200, (0, serializers_1.publicKey)()],
        feeVaultBump: [232, (0, serializers_1.u8)()],
        feeVaultAuthorityBump: [233, (0, serializers_1.u8)()],
        autoPadding2: [234, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 6 })],
        collectedGroupFeesOutstanding: [240, (0, types_1.getWrappedI80F48Serializer)()],
        totalLiabilityShares: [256, (0, types_1.getWrappedI80F48Serializer)()],
        totalAssetShares: [272, (0, types_1.getWrappedI80F48Serializer)()],
        lastUpdate: [288, (0, serializers_1.i64)()],
        config: [296, (0, types_1.getBankConfigSerializer)()],
        emissionsFlags: [840, (0, serializers_1.u64)()],
        emissionsRate: [848, (0, serializers_1.u64)()],
        emissionsRemaining: [856, (0, types_1.getWrappedI80F48Serializer)()],
        emissionsMint: [872, (0, serializers_1.publicKey)()],
        padding0: [904, (0, serializers_1.array)((0, serializers_1.u128)(), { size: 28 })],
        padding1: [1352, (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
    })
        .deserializeUsing((account) => deserializeBank(account))
        .whereField('discriminator', [142, 49, 166, 242, 50, 66, 97, 188]);
}
function getBankSize() {
    return 1864;
}
