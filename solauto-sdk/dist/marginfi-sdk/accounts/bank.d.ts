/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BankConfig, BankConfigArgs, WrappedI80F48, WrappedI80F48Args } from '../types';
export type Bank = Account<BankAccountData>;
export type BankAccountData = {
    discriminator: Array<number>;
    mint: PublicKey;
    mintDecimals: number;
    group: PublicKey;
    autoPadding0: Array<number>;
    assetShareValue: WrappedI80F48;
    liabilityShareValue: WrappedI80F48;
    liquidityVault: PublicKey;
    liquidityVaultBump: number;
    liquidityVaultAuthorityBump: number;
    insuranceVault: PublicKey;
    insuranceVaultBump: number;
    insuranceVaultAuthorityBump: number;
    autoPadding1: Array<number>;
    collectedInsuranceFeesOutstanding: WrappedI80F48;
    feeVault: PublicKey;
    feeVaultBump: number;
    feeVaultAuthorityBump: number;
    autoPadding2: Array<number>;
    collectedGroupFeesOutstanding: WrappedI80F48;
    totalLiabilityShares: WrappedI80F48;
    totalAssetShares: WrappedI80F48;
    lastUpdate: bigint;
    config: BankConfig;
    /**
     * Emissions Config Flags
     *
     * - EMISSIONS_FLAG_BORROW_ACTIVE: 1
     * - EMISSIONS_FLAG_LENDING_ACTIVE: 2
     *
     */
    emissionsFlags: bigint;
    /**
     * Emissions APR.
     * Number of emitted tokens (emissions_mint) per 1e(bank.mint_decimal) tokens (bank mint) (native amount) per 1 YEAR.
     */
    emissionsRate: bigint;
    emissionsRemaining: WrappedI80F48;
    emissionsMint: PublicKey;
    padding0: Array<bigint>;
    padding1: Array<bigint>;
};
export type BankAccountDataArgs = {
    mint: PublicKey;
    mintDecimals: number;
    group: PublicKey;
    autoPadding0: Array<number>;
    assetShareValue: WrappedI80F48Args;
    liabilityShareValue: WrappedI80F48Args;
    liquidityVault: PublicKey;
    liquidityVaultBump: number;
    liquidityVaultAuthorityBump: number;
    insuranceVault: PublicKey;
    insuranceVaultBump: number;
    insuranceVaultAuthorityBump: number;
    autoPadding1: Array<number>;
    collectedInsuranceFeesOutstanding: WrappedI80F48Args;
    feeVault: PublicKey;
    feeVaultBump: number;
    feeVaultAuthorityBump: number;
    autoPadding2: Array<number>;
    collectedGroupFeesOutstanding: WrappedI80F48Args;
    totalLiabilityShares: WrappedI80F48Args;
    totalAssetShares: WrappedI80F48Args;
    lastUpdate: number | bigint;
    config: BankConfigArgs;
    /**
     * Emissions Config Flags
     *
     * - EMISSIONS_FLAG_BORROW_ACTIVE: 1
     * - EMISSIONS_FLAG_LENDING_ACTIVE: 2
     *
     */
    emissionsFlags: number | bigint;
    /**
     * Emissions APR.
     * Number of emitted tokens (emissions_mint) per 1e(bank.mint_decimal) tokens (bank mint) (native amount) per 1 YEAR.
     */
    emissionsRate: number | bigint;
    emissionsRemaining: WrappedI80F48Args;
    emissionsMint: PublicKey;
    padding0: Array<number | bigint>;
    padding1: Array<number | bigint>;
};
export declare function getBankAccountDataSerializer(): Serializer<BankAccountDataArgs, BankAccountData>;
export declare function deserializeBank(rawAccount: RpcAccount): Bank;
export declare function fetchBank(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Bank>;
export declare function safeFetchBank(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Bank | null>;
export declare function fetchAllBank(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Bank[]>;
export declare function safeFetchAllBank(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Bank[]>;
export declare function getBankGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Bank, {
    discriminator: Array<number>;
    mint: PublicKey;
    mintDecimals: number;
    group: PublicKey;
    autoPadding0: Array<number>;
    assetShareValue: WrappedI80F48Args;
    liabilityShareValue: WrappedI80F48Args;
    liquidityVault: PublicKey;
    liquidityVaultBump: number;
    liquidityVaultAuthorityBump: number;
    insuranceVault: PublicKey;
    insuranceVaultBump: number;
    insuranceVaultAuthorityBump: number;
    autoPadding1: Array<number>;
    collectedInsuranceFeesOutstanding: WrappedI80F48Args;
    feeVault: PublicKey;
    feeVaultBump: number;
    feeVaultAuthorityBump: number;
    autoPadding2: Array<number>;
    collectedGroupFeesOutstanding: WrappedI80F48Args;
    totalLiabilityShares: WrappedI80F48Args;
    totalAssetShares: WrappedI80F48Args;
    lastUpdate: number | bigint;
    config: BankConfigArgs;
    emissionsFlags: number | bigint;
    emissionsRate: number | bigint;
    emissionsRemaining: WrappedI80F48Args;
    emissionsMint: PublicKey;
    padding0: Array<number | bigint>;
    padding1: Array<number | bigint>;
}>;
export declare function getBankSize(): number;
//# sourceMappingURL=bank.d.ts.map