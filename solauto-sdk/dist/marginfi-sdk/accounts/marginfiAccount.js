"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarginfiAccountAccountDataSerializer = getMarginfiAccountAccountDataSerializer;
exports.deserializeMarginfiAccount = deserializeMarginfiAccount;
exports.fetchMarginfiAccount = fetchMarginfiAccount;
exports.safeFetchMarginfiAccount = safeFetchMarginfiAccount;
exports.fetchAllMarginfiAccount = fetchAllMarginfiAccount;
exports.safeFetchAllMarginfiAccount = safeFetchAllMarginfiAccount;
exports.getMarginfiAccountGpaBuilder = getMarginfiAccountGpaBuilder;
exports.getMarginfiAccountSize = getMarginfiAccountSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getMarginfiAccountAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['group', (0, serializers_1.publicKey)()],
        ['authority', (0, serializers_1.publicKey)()],
        ['lendingAccount', (0, types_1.getLendingAccountSerializer)()],
        ['accountFlags', (0, serializers_1.u64)()],
        ['padding', (0, serializers_1.array)((0, serializers_1.u64)(), { size: 63 })],
    ], { description: 'MarginfiAccountAccountData' }), (value) => ({
        ...value,
        discriminator: [67, 178, 130, 109, 126, 114, 28, 42],
    }));
}
function deserializeMarginfiAccount(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getMarginfiAccountAccountDataSerializer());
}
async function fetchMarginfiAccount(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'MarginfiAccount');
    return deserializeMarginfiAccount(maybeAccount);
}
async function safeFetchMarginfiAccount(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMarginfiAccount(maybeAccount) : null;
}
async function fetchAllMarginfiAccount(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'MarginfiAccount');
        return deserializeMarginfiAccount(maybeAccount);
    });
}
async function safeFetchAllMarginfiAccount(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMarginfiAccount(maybeAccount));
}
function getMarginfiAccountGpaBuilder(context) {
    const programId = context.programs.getPublicKey('marginfi', 'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        group: [8, (0, serializers_1.publicKey)()],
        authority: [40, (0, serializers_1.publicKey)()],
        lendingAccount: [72, (0, types_1.getLendingAccountSerializer)()],
        accountFlags: [1800, (0, serializers_1.u64)()],
        padding: [1808, (0, serializers_1.array)((0, serializers_1.u64)(), { size: 63 })],
    })
        .deserializeUsing((account) => deserializeMarginfiAccount(account))
        .whereField('discriminator', [67, 178, 130, 109, 126, 114, 28, 42]);
}
function getMarginfiAccountSize() {
    return 2312;
}
