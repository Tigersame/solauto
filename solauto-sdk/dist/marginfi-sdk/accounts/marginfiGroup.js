"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarginfiGroupAccountDataSerializer = getMarginfiGroupAccountDataSerializer;
exports.deserializeMarginfiGroup = deserializeMarginfiGroup;
exports.fetchMarginfiGroup = fetchMarginfiGroup;
exports.safeFetchMarginfiGroup = safeFetchMarginfiGroup;
exports.fetchAllMarginfiGroup = fetchAllMarginfiGroup;
exports.safeFetchAllMarginfiGroup = safeFetchAllMarginfiGroup;
exports.getMarginfiGroupGpaBuilder = getMarginfiGroupGpaBuilder;
exports.getMarginfiGroupSize = getMarginfiGroupSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getMarginfiGroupAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['admin', (0, serializers_1.publicKey)()],
        ['padding0', (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
        ['padding1', (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
    ], { description: 'MarginfiGroupAccountData' }), (value) => ({
        ...value,
        discriminator: [182, 23, 173, 240, 151, 206, 182, 67],
    }));
}
function deserializeMarginfiGroup(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getMarginfiGroupAccountDataSerializer());
}
async function fetchMarginfiGroup(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'MarginfiGroup');
    return deserializeMarginfiGroup(maybeAccount);
}
async function safeFetchMarginfiGroup(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMarginfiGroup(maybeAccount) : null;
}
async function fetchAllMarginfiGroup(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'MarginfiGroup');
        return deserializeMarginfiGroup(maybeAccount);
    });
}
async function safeFetchAllMarginfiGroup(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMarginfiGroup(maybeAccount));
}
function getMarginfiGroupGpaBuilder(context) {
    const programId = context.programs.getPublicKey('marginfi', 'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        admin: [8, (0, serializers_1.publicKey)()],
        padding0: [40, (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
        padding1: [552, (0, serializers_1.array)((0, serializers_1.u128)(), { size: 32 })],
    })
        .deserializeUsing((account) => deserializeMarginfiGroup(account))
        .whereField('discriminator', [182, 23, 173, 240, 151, 206, 182, 67]);
}
function getMarginfiGroupSize() {
    return 1064;
}
