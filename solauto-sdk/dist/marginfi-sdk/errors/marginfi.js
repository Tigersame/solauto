"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IllegalAccountAuthorityTransferError = exports.IllegalBalanceStateError = exports.IllegalFlagError = exports.IllegalFlashloanError = exports.AccountInFlashloanError = exports.AccountTempActiveBalanceLimitExceededError = exports.AccountDisabledError = exports.EmissionsUpdateErrorError = exports.CannotCloseOutstandingEmissionsError = exports.InvalidSwitchboardDecimalConversionError = exports.OracleNotSetupError = exports.EmissionsAlreadySetupError = exports.IsolatedAccountIllegalStateError = exports.InvalidPriceError = exports.BankLiabilityCapacityExceededError = exports.IllegalUtilizationRatioError = exports.InvalidOracleSetupError = exports.NoLiabilityFoundError = exports.NoAssetFoundError = exports.OperationRepayOnlyError = exports.OperationBorrowOnlyError = exports.OperationWithdrawOnlyError = exports.OperationDepositOnlyError = exports.BankAccoutNotFoundError = exports.BankReduceOnlyError = exports.BankPausedError = exports.StaleOracleError = exports.InvalidConfigError = exports.BalanceNotBadDebtError = exports.AccountNotBankruptError = exports.IllegalLiquidationError = exports.BankAlreadyExistsError = exports.LendingAccountBalanceSlotsFullError = exports.BadAccountHealthError = exports.InvalidBankAccountError = exports.MissingBankAccountError = exports.InvalidOracleAccountError = exports.MissingPythAccountError = exports.MissingPythOrBankAccountError = exports.InvalidTransferError = exports.BankAssetCapacityExceededError = exports.LendingAccountBalanceNotFoundError = exports.BankNotFoundError = exports.MathErrorError = void 0;
exports.getMarginfiErrorFromCode = getMarginfiErrorFromCode;
exports.getMarginfiErrorFromName = getMarginfiErrorFromName;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** MathError: Math error */
class MathErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Math error', program, cause);
        this.name = 'MathError';
        this.code = 0x1770; // 6000
    }
}
exports.MathErrorError = MathErrorError;
codeToErrorMap.set(0x1770, MathErrorError);
nameToErrorMap.set('MathError', MathErrorError);
/** BankNotFound: Invalid bank index */
class BankNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid bank index', program, cause);
        this.name = 'BankNotFound';
        this.code = 0x1771; // 6001
    }
}
exports.BankNotFoundError = BankNotFoundError;
codeToErrorMap.set(0x1771, BankNotFoundError);
nameToErrorMap.set('BankNotFound', BankNotFoundError);
/** LendingAccountBalanceNotFound: Lending account balance not found */
class LendingAccountBalanceNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Lending account balance not found', program, cause);
        this.name = 'LendingAccountBalanceNotFound';
        this.code = 0x1772; // 6002
    }
}
exports.LendingAccountBalanceNotFoundError = LendingAccountBalanceNotFoundError;
codeToErrorMap.set(0x1772, LendingAccountBalanceNotFoundError);
nameToErrorMap.set('LendingAccountBalanceNotFound', LendingAccountBalanceNotFoundError);
/** BankAssetCapacityExceeded: Bank deposit capacity exceeded */
class BankAssetCapacityExceededError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank deposit capacity exceeded', program, cause);
        this.name = 'BankAssetCapacityExceeded';
        this.code = 0x1773; // 6003
    }
}
exports.BankAssetCapacityExceededError = BankAssetCapacityExceededError;
codeToErrorMap.set(0x1773, BankAssetCapacityExceededError);
nameToErrorMap.set('BankAssetCapacityExceeded', BankAssetCapacityExceededError);
/** InvalidTransfer: Invalid transfer */
class InvalidTransferError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid transfer', program, cause);
        this.name = 'InvalidTransfer';
        this.code = 0x1774; // 6004
    }
}
exports.InvalidTransferError = InvalidTransferError;
codeToErrorMap.set(0x1774, InvalidTransferError);
nameToErrorMap.set('InvalidTransfer', InvalidTransferError);
/** MissingPythOrBankAccount: Missing Pyth or Bank account */
class MissingPythOrBankAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing Pyth or Bank account', program, cause);
        this.name = 'MissingPythOrBankAccount';
        this.code = 0x1775; // 6005
    }
}
exports.MissingPythOrBankAccountError = MissingPythOrBankAccountError;
codeToErrorMap.set(0x1775, MissingPythOrBankAccountError);
nameToErrorMap.set('MissingPythOrBankAccount', MissingPythOrBankAccountError);
/** MissingPythAccount: Missing Pyth account */
class MissingPythAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing Pyth account', program, cause);
        this.name = 'MissingPythAccount';
        this.code = 0x1776; // 6006
    }
}
exports.MissingPythAccountError = MissingPythAccountError;
codeToErrorMap.set(0x1776, MissingPythAccountError);
nameToErrorMap.set('MissingPythAccount', MissingPythAccountError);
/** InvalidOracleAccount: Invalid Pyth account */
class InvalidOracleAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Pyth account', program, cause);
        this.name = 'InvalidOracleAccount';
        this.code = 0x1777; // 6007
    }
}
exports.InvalidOracleAccountError = InvalidOracleAccountError;
codeToErrorMap.set(0x1777, InvalidOracleAccountError);
nameToErrorMap.set('InvalidOracleAccount', InvalidOracleAccountError);
/** MissingBankAccount: Missing Bank account */
class MissingBankAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing Bank account', program, cause);
        this.name = 'MissingBankAccount';
        this.code = 0x1778; // 6008
    }
}
exports.MissingBankAccountError = MissingBankAccountError;
codeToErrorMap.set(0x1778, MissingBankAccountError);
nameToErrorMap.set('MissingBankAccount', MissingBankAccountError);
/** InvalidBankAccount: Invalid Bank account */
class InvalidBankAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Bank account', program, cause);
        this.name = 'InvalidBankAccount';
        this.code = 0x1779; // 6009
    }
}
exports.InvalidBankAccountError = InvalidBankAccountError;
codeToErrorMap.set(0x1779, InvalidBankAccountError);
nameToErrorMap.set('InvalidBankAccount', InvalidBankAccountError);
/** BadAccountHealth: Bad account health */
class BadAccountHealthError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bad account health', program, cause);
        this.name = 'BadAccountHealth';
        this.code = 0x177a; // 6010
    }
}
exports.BadAccountHealthError = BadAccountHealthError;
codeToErrorMap.set(0x177a, BadAccountHealthError);
nameToErrorMap.set('BadAccountHealth', BadAccountHealthError);
/** LendingAccountBalanceSlotsFull: Lending account balance slots are full */
class LendingAccountBalanceSlotsFullError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Lending account balance slots are full', program, cause);
        this.name = 'LendingAccountBalanceSlotsFull';
        this.code = 0x177b; // 6011
    }
}
exports.LendingAccountBalanceSlotsFullError = LendingAccountBalanceSlotsFullError;
codeToErrorMap.set(0x177b, LendingAccountBalanceSlotsFullError);
nameToErrorMap.set('LendingAccountBalanceSlotsFull', LendingAccountBalanceSlotsFullError);
/** BankAlreadyExists: Bank already exists */
class BankAlreadyExistsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank already exists', program, cause);
        this.name = 'BankAlreadyExists';
        this.code = 0x177c; // 6012
    }
}
exports.BankAlreadyExistsError = BankAlreadyExistsError;
codeToErrorMap.set(0x177c, BankAlreadyExistsError);
nameToErrorMap.set('BankAlreadyExists', BankAlreadyExistsError);
/** IllegalLiquidation: Illegal liquidation */
class IllegalLiquidationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal liquidation', program, cause);
        this.name = 'IllegalLiquidation';
        this.code = 0x177d; // 6013
    }
}
exports.IllegalLiquidationError = IllegalLiquidationError;
codeToErrorMap.set(0x177d, IllegalLiquidationError);
nameToErrorMap.set('IllegalLiquidation', IllegalLiquidationError);
/** AccountNotBankrupt: Account is not bankrupt */
class AccountNotBankruptError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account is not bankrupt', program, cause);
        this.name = 'AccountNotBankrupt';
        this.code = 0x177e; // 6014
    }
}
exports.AccountNotBankruptError = AccountNotBankruptError;
codeToErrorMap.set(0x177e, AccountNotBankruptError);
nameToErrorMap.set('AccountNotBankrupt', AccountNotBankruptError);
/** BalanceNotBadDebt: Account balance is not bad debt */
class BalanceNotBadDebtError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account balance is not bad debt', program, cause);
        this.name = 'BalanceNotBadDebt';
        this.code = 0x177f; // 6015
    }
}
exports.BalanceNotBadDebtError = BalanceNotBadDebtError;
codeToErrorMap.set(0x177f, BalanceNotBadDebtError);
nameToErrorMap.set('BalanceNotBadDebt', BalanceNotBadDebtError);
/** InvalidConfig: Invalid group config */
class InvalidConfigError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid group config', program, cause);
        this.name = 'InvalidConfig';
        this.code = 0x1780; // 6016
    }
}
exports.InvalidConfigError = InvalidConfigError;
codeToErrorMap.set(0x1780, InvalidConfigError);
nameToErrorMap.set('InvalidConfig', InvalidConfigError);
/** StaleOracle: Stale oracle data */
class StaleOracleError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Stale oracle data', program, cause);
        this.name = 'StaleOracle';
        this.code = 0x1781; // 6017
    }
}
exports.StaleOracleError = StaleOracleError;
codeToErrorMap.set(0x1781, StaleOracleError);
nameToErrorMap.set('StaleOracle', StaleOracleError);
/** BankPaused: Bank paused */
class BankPausedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank paused', program, cause);
        this.name = 'BankPaused';
        this.code = 0x1782; // 6018
    }
}
exports.BankPausedError = BankPausedError;
codeToErrorMap.set(0x1782, BankPausedError);
nameToErrorMap.set('BankPaused', BankPausedError);
/** BankReduceOnly: Bank is ReduceOnly mode */
class BankReduceOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank is ReduceOnly mode', program, cause);
        this.name = 'BankReduceOnly';
        this.code = 0x1783; // 6019
    }
}
exports.BankReduceOnlyError = BankReduceOnlyError;
codeToErrorMap.set(0x1783, BankReduceOnlyError);
nameToErrorMap.set('BankReduceOnly', BankReduceOnlyError);
/** BankAccoutNotFound: Bank is missing */
class BankAccoutNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank is missing', program, cause);
        this.name = 'BankAccoutNotFound';
        this.code = 0x1784; // 6020
    }
}
exports.BankAccoutNotFoundError = BankAccoutNotFoundError;
codeToErrorMap.set(0x1784, BankAccoutNotFoundError);
nameToErrorMap.set('BankAccoutNotFound', BankAccoutNotFoundError);
/** OperationDepositOnly: Operation is deposit-only */
class OperationDepositOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Operation is deposit-only', program, cause);
        this.name = 'OperationDepositOnly';
        this.code = 0x1785; // 6021
    }
}
exports.OperationDepositOnlyError = OperationDepositOnlyError;
codeToErrorMap.set(0x1785, OperationDepositOnlyError);
nameToErrorMap.set('OperationDepositOnly', OperationDepositOnlyError);
/** OperationWithdrawOnly: Operation is withdraw-only */
class OperationWithdrawOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Operation is withdraw-only', program, cause);
        this.name = 'OperationWithdrawOnly';
        this.code = 0x1786; // 6022
    }
}
exports.OperationWithdrawOnlyError = OperationWithdrawOnlyError;
codeToErrorMap.set(0x1786, OperationWithdrawOnlyError);
nameToErrorMap.set('OperationWithdrawOnly', OperationWithdrawOnlyError);
/** OperationBorrowOnly: Operation is borrow-only */
class OperationBorrowOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Operation is borrow-only', program, cause);
        this.name = 'OperationBorrowOnly';
        this.code = 0x1787; // 6023
    }
}
exports.OperationBorrowOnlyError = OperationBorrowOnlyError;
codeToErrorMap.set(0x1787, OperationBorrowOnlyError);
nameToErrorMap.set('OperationBorrowOnly', OperationBorrowOnlyError);
/** OperationRepayOnly: Operation is repay-only */
class OperationRepayOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Operation is repay-only', program, cause);
        this.name = 'OperationRepayOnly';
        this.code = 0x1788; // 6024
    }
}
exports.OperationRepayOnlyError = OperationRepayOnlyError;
codeToErrorMap.set(0x1788, OperationRepayOnlyError);
nameToErrorMap.set('OperationRepayOnly', OperationRepayOnlyError);
/** NoAssetFound: No asset found */
class NoAssetFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('No asset found', program, cause);
        this.name = 'NoAssetFound';
        this.code = 0x1789; // 6025
    }
}
exports.NoAssetFoundError = NoAssetFoundError;
codeToErrorMap.set(0x1789, NoAssetFoundError);
nameToErrorMap.set('NoAssetFound', NoAssetFoundError);
/** NoLiabilityFound: No liability found */
class NoLiabilityFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('No liability found', program, cause);
        this.name = 'NoLiabilityFound';
        this.code = 0x178a; // 6026
    }
}
exports.NoLiabilityFoundError = NoLiabilityFoundError;
codeToErrorMap.set(0x178a, NoLiabilityFoundError);
nameToErrorMap.set('NoLiabilityFound', NoLiabilityFoundError);
/** InvalidOracleSetup: Invalid oracle setup */
class InvalidOracleSetupError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid oracle setup', program, cause);
        this.name = 'InvalidOracleSetup';
        this.code = 0x178b; // 6027
    }
}
exports.InvalidOracleSetupError = InvalidOracleSetupError;
codeToErrorMap.set(0x178b, InvalidOracleSetupError);
nameToErrorMap.set('InvalidOracleSetup', InvalidOracleSetupError);
/** IllegalUtilizationRatio: Invalid bank utilization ratio */
class IllegalUtilizationRatioError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid bank utilization ratio', program, cause);
        this.name = 'IllegalUtilizationRatio';
        this.code = 0x178c; // 6028
    }
}
exports.IllegalUtilizationRatioError = IllegalUtilizationRatioError;
codeToErrorMap.set(0x178c, IllegalUtilizationRatioError);
nameToErrorMap.set('IllegalUtilizationRatio', IllegalUtilizationRatioError);
/** BankLiabilityCapacityExceeded: Bank borrow cap exceeded */
class BankLiabilityCapacityExceededError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bank borrow cap exceeded', program, cause);
        this.name = 'BankLiabilityCapacityExceeded';
        this.code = 0x178d; // 6029
    }
}
exports.BankLiabilityCapacityExceededError = BankLiabilityCapacityExceededError;
codeToErrorMap.set(0x178d, BankLiabilityCapacityExceededError);
nameToErrorMap.set('BankLiabilityCapacityExceeded', BankLiabilityCapacityExceededError);
/** InvalidPrice: Invalid Price */
class InvalidPriceError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Price', program, cause);
        this.name = 'InvalidPrice';
        this.code = 0x178e; // 6030
    }
}
exports.InvalidPriceError = InvalidPriceError;
codeToErrorMap.set(0x178e, InvalidPriceError);
nameToErrorMap.set('InvalidPrice', InvalidPriceError);
/** IsolatedAccountIllegalState: Account can have only one liablity when account is under isolated risk */
class IsolatedAccountIllegalStateError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account can have only one liablity when account is under isolated risk', program, cause);
        this.name = 'IsolatedAccountIllegalState';
        this.code = 0x178f; // 6031
    }
}
exports.IsolatedAccountIllegalStateError = IsolatedAccountIllegalStateError;
codeToErrorMap.set(0x178f, IsolatedAccountIllegalStateError);
nameToErrorMap.set('IsolatedAccountIllegalState', IsolatedAccountIllegalStateError);
/** EmissionsAlreadySetup: Emissions already setup */
class EmissionsAlreadySetupError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Emissions already setup', program, cause);
        this.name = 'EmissionsAlreadySetup';
        this.code = 0x1790; // 6032
    }
}
exports.EmissionsAlreadySetupError = EmissionsAlreadySetupError;
codeToErrorMap.set(0x1790, EmissionsAlreadySetupError);
nameToErrorMap.set('EmissionsAlreadySetup', EmissionsAlreadySetupError);
/** OracleNotSetup: Oracle is not set */
class OracleNotSetupError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Oracle is not set', program, cause);
        this.name = 'OracleNotSetup';
        this.code = 0x1791; // 6033
    }
}
exports.OracleNotSetupError = OracleNotSetupError;
codeToErrorMap.set(0x1791, OracleNotSetupError);
nameToErrorMap.set('OracleNotSetup', OracleNotSetupError);
/** InvalidSwitchboardDecimalConversion: Invalid swithcboard decimal conversion */
class InvalidSwitchboardDecimalConversionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid swithcboard decimal conversion', program, cause);
        this.name = 'InvalidSwitchboardDecimalConversion';
        this.code = 0x1792; // 6034
    }
}
exports.InvalidSwitchboardDecimalConversionError = InvalidSwitchboardDecimalConversionError;
codeToErrorMap.set(0x1792, InvalidSwitchboardDecimalConversionError);
nameToErrorMap.set('InvalidSwitchboardDecimalConversion', InvalidSwitchboardDecimalConversionError);
/** CannotCloseOutstandingEmissions: Cannot close balance because of outstanding emissions */
class CannotCloseOutstandingEmissionsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot close balance because of outstanding emissions', program, cause);
        this.name = 'CannotCloseOutstandingEmissions';
        this.code = 0x1793; // 6035
    }
}
exports.CannotCloseOutstandingEmissionsError = CannotCloseOutstandingEmissionsError;
codeToErrorMap.set(0x1793, CannotCloseOutstandingEmissionsError);
nameToErrorMap.set('CannotCloseOutstandingEmissions', CannotCloseOutstandingEmissionsError);
/** EmissionsUpdateError: Update emissions error */
class EmissionsUpdateErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Update emissions error', program, cause);
        this.name = 'EmissionsUpdateError';
        this.code = 0x1794; // 6036
    }
}
exports.EmissionsUpdateErrorError = EmissionsUpdateErrorError;
codeToErrorMap.set(0x1794, EmissionsUpdateErrorError);
nameToErrorMap.set('EmissionsUpdateError', EmissionsUpdateErrorError);
/** AccountDisabled: Account disabled */
class AccountDisabledError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account disabled', program, cause);
        this.name = 'AccountDisabled';
        this.code = 0x1795; // 6037
    }
}
exports.AccountDisabledError = AccountDisabledError;
codeToErrorMap.set(0x1795, AccountDisabledError);
nameToErrorMap.set('AccountDisabled', AccountDisabledError);
/** AccountTempActiveBalanceLimitExceeded: Account can't temporarily open 3 balances, please close a balance first */
class AccountTempActiveBalanceLimitExceededError extends umi_1.ProgramError {
    constructor(program, cause) {
        super("Account can't temporarily open 3 balances, please close a balance first", program, cause);
        this.name = 'AccountTempActiveBalanceLimitExceeded';
        this.code = 0x1796; // 6038
    }
}
exports.AccountTempActiveBalanceLimitExceededError = AccountTempActiveBalanceLimitExceededError;
codeToErrorMap.set(0x1796, AccountTempActiveBalanceLimitExceededError);
nameToErrorMap.set('AccountTempActiveBalanceLimitExceeded', AccountTempActiveBalanceLimitExceededError);
/** AccountInFlashloan: Illegal action during flashloan */
class AccountInFlashloanError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal action during flashloan', program, cause);
        this.name = 'AccountInFlashloan';
        this.code = 0x1797; // 6039
    }
}
exports.AccountInFlashloanError = AccountInFlashloanError;
codeToErrorMap.set(0x1797, AccountInFlashloanError);
nameToErrorMap.set('AccountInFlashloan', AccountInFlashloanError);
/** IllegalFlashloan: Illegal flashloan */
class IllegalFlashloanError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal flashloan', program, cause);
        this.name = 'IllegalFlashloan';
        this.code = 0x1798; // 6040
    }
}
exports.IllegalFlashloanError = IllegalFlashloanError;
codeToErrorMap.set(0x1798, IllegalFlashloanError);
nameToErrorMap.set('IllegalFlashloan', IllegalFlashloanError);
/** IllegalFlag: Illegal flag */
class IllegalFlagError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal flag', program, cause);
        this.name = 'IllegalFlag';
        this.code = 0x1799; // 6041
    }
}
exports.IllegalFlagError = IllegalFlagError;
codeToErrorMap.set(0x1799, IllegalFlagError);
nameToErrorMap.set('IllegalFlag', IllegalFlagError);
/** IllegalBalanceState: Illegal balance state */
class IllegalBalanceStateError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal balance state', program, cause);
        this.name = 'IllegalBalanceState';
        this.code = 0x179a; // 6042
    }
}
exports.IllegalBalanceStateError = IllegalBalanceStateError;
codeToErrorMap.set(0x179a, IllegalBalanceStateError);
nameToErrorMap.set('IllegalBalanceState', IllegalBalanceStateError);
/** IllegalAccountAuthorityTransfer: Illegal account authority transfer */
class IllegalAccountAuthorityTransferError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Illegal account authority transfer', program, cause);
        this.name = 'IllegalAccountAuthorityTransfer';
        this.code = 0x179b; // 6043
    }
}
exports.IllegalAccountAuthorityTransferError = IllegalAccountAuthorityTransferError;
codeToErrorMap.set(0x179b, IllegalAccountAuthorityTransferError);
nameToErrorMap.set('IllegalAccountAuthorityTransfer', IllegalAccountAuthorityTransferError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMarginfiErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMarginfiErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
