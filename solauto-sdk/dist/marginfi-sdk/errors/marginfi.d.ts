/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** MathError: Math error */
export declare class MathErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankNotFound: Invalid bank index */
export declare class BankNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** LendingAccountBalanceNotFound: Lending account balance not found */
export declare class LendingAccountBalanceNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankAssetCapacityExceeded: Bank deposit capacity exceeded */
export declare class BankAssetCapacityExceededError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidTransfer: Invalid transfer */
export declare class InvalidTransferError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingPythOrBankAccount: Missing Pyth or Bank account */
export declare class MissingPythOrBankAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingPythAccount: Missing Pyth account */
export declare class MissingPythAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidOracleAccount: Invalid Pyth account */
export declare class InvalidOracleAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingBankAccount: Missing Bank account */
export declare class MissingBankAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidBankAccount: Invalid Bank account */
export declare class InvalidBankAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BadAccountHealth: Bad account health */
export declare class BadAccountHealthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** LendingAccountBalanceSlotsFull: Lending account balance slots are full */
export declare class LendingAccountBalanceSlotsFullError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankAlreadyExists: Bank already exists */
export declare class BankAlreadyExistsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalLiquidation: Illegal liquidation */
export declare class IllegalLiquidationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountNotBankrupt: Account is not bankrupt */
export declare class AccountNotBankruptError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BalanceNotBadDebt: Account balance is not bad debt */
export declare class BalanceNotBadDebtError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidConfig: Invalid group config */
export declare class InvalidConfigError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** StaleOracle: Stale oracle data */
export declare class StaleOracleError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankPaused: Bank paused */
export declare class BankPausedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankReduceOnly: Bank is ReduceOnly mode */
export declare class BankReduceOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankAccoutNotFound: Bank is missing */
export declare class BankAccoutNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OperationDepositOnly: Operation is deposit-only */
export declare class OperationDepositOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OperationWithdrawOnly: Operation is withdraw-only */
export declare class OperationWithdrawOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OperationBorrowOnly: Operation is borrow-only */
export declare class OperationBorrowOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OperationRepayOnly: Operation is repay-only */
export declare class OperationRepayOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NoAssetFound: No asset found */
export declare class NoAssetFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NoLiabilityFound: No liability found */
export declare class NoLiabilityFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidOracleSetup: Invalid oracle setup */
export declare class InvalidOracleSetupError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalUtilizationRatio: Invalid bank utilization ratio */
export declare class IllegalUtilizationRatioError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BankLiabilityCapacityExceeded: Bank borrow cap exceeded */
export declare class BankLiabilityCapacityExceededError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidPrice: Invalid Price */
export declare class InvalidPriceError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IsolatedAccountIllegalState: Account can have only one liablity when account is under isolated risk */
export declare class IsolatedAccountIllegalStateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** EmissionsAlreadySetup: Emissions already setup */
export declare class EmissionsAlreadySetupError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OracleNotSetup: Oracle is not set */
export declare class OracleNotSetupError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidSwitchboardDecimalConversion: Invalid swithcboard decimal conversion */
export declare class InvalidSwitchboardDecimalConversionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotCloseOutstandingEmissions: Cannot close balance because of outstanding emissions */
export declare class CannotCloseOutstandingEmissionsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** EmissionsUpdateError: Update emissions error */
export declare class EmissionsUpdateErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountDisabled: Account disabled */
export declare class AccountDisabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountTempActiveBalanceLimitExceeded: Account can't temporarily open 3 balances, please close a balance first */
export declare class AccountTempActiveBalanceLimitExceededError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountInFlashloan: Illegal action during flashloan */
export declare class AccountInFlashloanError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalFlashloan: Illegal flashloan */
export declare class IllegalFlashloanError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalFlag: Illegal flag */
export declare class IllegalFlagError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalBalanceState: Illegal balance state */
export declare class IllegalBalanceStateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IllegalAccountAuthorityTransfer: Illegal account authority transfer */
export declare class IllegalAccountAuthorityTransferError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMarginfiErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMarginfiErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
//# sourceMappingURL=marginfi.d.ts.map