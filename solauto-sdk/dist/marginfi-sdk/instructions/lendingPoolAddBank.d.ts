/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BankConfigCompact, BankConfigCompactArgs } from '../types';
export type LendingPoolAddBankInstructionAccounts = {
    marginfiGroup: PublicKey | Pda;
    admin: Signer;
    feePayer?: Signer;
    bankMint: PublicKey | Pda;
    bank: Signer;
    liquidityVaultAuthority: PublicKey | Pda;
    liquidityVault: PublicKey | Pda;
    insuranceVaultAuthority: PublicKey | Pda;
    insuranceVault: PublicKey | Pda;
    feeVaultAuthority: PublicKey | Pda;
    feeVault: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type LendingPoolAddBankInstructionData = {
    discriminator: Array<number>;
    bankConfig: BankConfigCompact;
};
export type LendingPoolAddBankInstructionDataArgs = {
    bankConfig: BankConfigCompactArgs;
};
export declare function getLendingPoolAddBankInstructionDataSerializer(): Serializer<LendingPoolAddBankInstructionDataArgs, LendingPoolAddBankInstructionData>;
export type LendingPoolAddBankInstructionArgs = LendingPoolAddBankInstructionDataArgs;
export declare function lendingPoolAddBank(context: Pick<Context, 'payer' | 'programs'>, input: LendingPoolAddBankInstructionAccounts & LendingPoolAddBankInstructionArgs): TransactionBuilder;
//# sourceMappingURL=lendingPoolAddBank.d.ts.map