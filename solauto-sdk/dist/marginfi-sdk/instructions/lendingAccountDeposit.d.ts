/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type LendingAccountDepositInstructionAccounts = {
    marginfiGroup: PublicKey | Pda;
    marginfiAccount: PublicKey | Pda;
    signer: Signer;
    bank: PublicKey | Pda;
    signerTokenAccount: PublicKey | Pda;
    bankLiquidityVault: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type LendingAccountDepositInstructionData = {
    discriminator: Array<number>;
    amount: bigint;
};
export type LendingAccountDepositInstructionDataArgs = {
    amount: number | bigint;
};
export declare function getLendingAccountDepositInstructionDataSerializer(): Serializer<LendingAccountDepositInstructionDataArgs, LendingAccountDepositInstructionData>;
export type LendingAccountDepositInstructionArgs = LendingAccountDepositInstructionDataArgs;
export declare function lendingAccountDeposit(context: Pick<Context, 'programs'>, input: LendingAccountDepositInstructionAccounts & LendingAccountDepositInstructionArgs): TransactionBuilder;
//# sourceMappingURL=lendingAccountDeposit.d.ts.map