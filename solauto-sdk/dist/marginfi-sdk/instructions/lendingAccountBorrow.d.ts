/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type LendingAccountBorrowInstructionAccounts = {
    marginfiGroup: PublicKey | Pda;
    marginfiAccount: PublicKey | Pda;
    signer: Signer;
    bank: PublicKey | Pda;
    destinationTokenAccount: PublicKey | Pda;
    bankLiquidityVaultAuthority: PublicKey | Pda;
    bankLiquidityVault: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type LendingAccountBorrowInstructionData = {
    discriminator: Array<number>;
    amount: bigint;
};
export type LendingAccountBorrowInstructionDataArgs = {
    amount: number | bigint;
};
export declare function getLendingAccountBorrowInstructionDataSerializer(): Serializer<LendingAccountBorrowInstructionDataArgs, LendingAccountBorrowInstructionData>;
export type LendingAccountBorrowInstructionArgs = LendingAccountBorrowInstructionDataArgs;
export declare function lendingAccountBorrow(context: Pick<Context, 'programs'>, input: LendingAccountBorrowInstructionAccounts & LendingAccountBorrowInstructionArgs): TransactionBuilder;
//# sourceMappingURL=lendingAccountBorrow.d.ts.map