/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type LendingPoolSetupEmissionsInstructionAccounts = {
    marginfiGroup: PublicKey | Pda;
    admin: Signer;
    bank: PublicKey | Pda;
    emissionsMint: PublicKey | Pda;
    emissionsAuth: PublicKey | Pda;
    emissionsTokenAccount: PublicKey | Pda;
    emissionsFundingAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type LendingPoolSetupEmissionsInstructionData = {
    discriminator: Array<number>;
    flags: bigint;
    rate: bigint;
    totalEmissions: bigint;
};
export type LendingPoolSetupEmissionsInstructionDataArgs = {
    flags: number | bigint;
    rate: number | bigint;
    totalEmissions: number | bigint;
};
export declare function getLendingPoolSetupEmissionsInstructionDataSerializer(): Serializer<LendingPoolSetupEmissionsInstructionDataArgs, LendingPoolSetupEmissionsInstructionData>;
export type LendingPoolSetupEmissionsInstructionArgs = LendingPoolSetupEmissionsInstructionDataArgs;
export declare function lendingPoolSetupEmissions(context: Pick<Context, 'programs'>, input: LendingPoolSetupEmissionsInstructionAccounts & LendingPoolSetupEmissionsInstructionArgs): TransactionBuilder;
//# sourceMappingURL=lendingPoolSetupEmissions.d.ts.map